#!/bin/bash

# Config file path
CONFIG_FILE="$HOME/.config/jelly/config"

# Determine the default media player based on the operating system
DEFAULT_MEDIA_PLAYER=$([[ "$OSTYPE" == "darwin"* ]] && echo "iina" || echo "mpv")

# Ensure required commands are available
for cmd in curl jq fzf; do
  if ! command -v "$cmd" &>/dev/null; then
    echo -e "\033[31mError:\033[0m '$cmd' is required but not installed."
    exit 1
  fi
done

# Ensure config file exists or create one
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Config file missing, Creating one at $CONFIG_FILE"
  mkdir -p "$(dirname "$CONFIG_FILE")"
  cat >"$CONFIG_FILE" <<EOL
# Jelly Config
server=http://your-jellyfin-server:8096
api_key=your_api_key
player=$DEFAULT_MEDIA_PLAYER
EOL
  echo "Update it with your Server URL, API key."
  exit 1
fi

# Source the config file
source "$CONFIG_FILE"

# Set media player from config or use default
MEDIA_PLAYER=${player:-$DEFAULT_MEDIA_PLAYER}

# Ensure the selected media player is installed
if ! command -v "$MEDIA_PLAYER" &>/dev/null; then
  echo -e "\033[31mError:\033[0m '$MEDIA_PLAYER' is required but not installed."
  exit 1
fi

# Check required parameters
if [ -z "$server" ] || [ -z "$api_key" ]; then
  echo -e "\033[31mError:\033[0m Config file is missing 'server' or 'api_key'."
  exit 1
fi

# Check if the server is reachable
if ! curl -s --connect-timeout 5 -o /dev/null "$server"; then
  echo -e "\033[31mError:\033[0m Unable to reach Jellyfin Server at $server"
  echo "Please check your config."
  exit 1
fi

# Define custom fzf options
export FZF_DEFAULT_OPTS='
    --color=fg:#cad3f5,fg+:#cad3f5,bg:-1,bg+:-1
    --color=hl:#5f87af,hl+:#5fd7ff,info:#eed49f,marker:#87ff00
    --color=prompt:#c6a0f6,spinner:#f4dbd6,pointer:#f4dbd6,header:#b7bdf8
    --color=border:#494d64,label:#aeaeae,query:#d9d9d9,separator:#d0d0d0
    --border="rounded" --border-label=" Jelly "
    --marker=">" --pointer="î˜‚" --separator="â”€" --scrollbar="â”‚"
    --prompt="  ó°¥¨ Search: "
'

# Fetch user ID
fetch_user_id() {
  curl -s -X GET -H "X-Emby-Token: $api_key" "$server/Users" | jq -r '.[0].Id'
}

# Fetch libraries
fetch_libraries() {
  user_id=$(fetch_user_id)
  curl -s -X GET -H "X-Emby-Token: $api_key" "$server/Users/$user_id/Views" | jq -r '.Items[] | "\(.Id)|\(.Name)"'
}

# Fetch media list for a specific library
fetch_media() {
  local library_id=$1
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Items?ParentId=$library_id&IncludeItemTypes=Movie,Series&Recursive=true" | jq -r '.Items[] | "\(.Id)|\(.Type)|\(.Name)"'
}

# Fetch episodes for a series
fetch_episodes() {
  local series_id=$1
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Items?ParentId=$series_id&IncludeItemTypes=Episode&Recursive=true" | jq -r '.Items[] | "\(.Id)|\(.Name)"'
}

# Play media
play_media() {
  local id=$1
  local name=$2
  local playback_url="$server/Videos/$id/stream.mp4?X-Emby-Token=$api_key"

  # Redirect media player output to /dev/null to suppress terminal printouts
  if [[ "$MEDIA_PLAYER" == "iina" ]]; then
    open -a IINA "$playback_url" --args --force-media-title="$name" >/dev/null 2>&1
  else
    mpv "$playback_url" --force-media-title="$name" >/dev/null 2>&1
  fi
}

# Main script
main() {
  while true; do
    local libraries_list library_selected library_id media_list selected media_type media_name media_id

    # Fetch libraries and allow the user to select one
    libraries_list=$(fetch_libraries | awk -F'|' '{print "ðŸ“‚ " $2}')
    [ -z "$libraries_list" ] && exit 1

    library_selected=$(echo "$libraries_list" | fzf)
    if [ $? -ne 0 ]; then
      # If Escape is pressed, exit the script
      exit 0
    fi
    [ -z "$library_selected" ] && continue

    library_id=$(fetch_libraries | grep "|$(echo "$library_selected" | sed 's/ðŸ“‚ //')$" | awk -F'|' '{print $1}')
    while true; do
      media_list=$(fetch_media "$library_id" | awk -F'|' '{
        if ($2 == "Movie") print "ðŸŽ¬ " $3;
        else if ($2 == "Series") print "ðŸ“º " $3;
      }')
      [ -z "$media_list" ] && break

      selected=$(echo "$media_list" | fzf)
      if [ $? -ne 0 ]; then
        # If Escape is pressed, go back to the library selection
        break
      fi
      [ -z "$selected" ] && continue

      # Get the corresponding media ID and type
      media_id=$(fetch_media "$library_id" | grep "|$(echo "$selected" | sed 's/[ðŸŽ¬ðŸ“º] //')$" | awk -F'|' '{print $1}')
      media_type=$(fetch_media "$library_id" | grep "|$(echo "$selected" | sed 's/[ðŸŽ¬ðŸ“º] //')$" | awk -F'|' '{print $2}')
      media_name=$(echo "$selected" | sed 's/[ðŸŽ¬ðŸ“º] //')

      if [[ "$media_type" == "Movie" ]]; then
        # Play movie directly
        play_media "$media_id" "$media_name"
      elif [[ "$media_type" == "Series" ]]; then
        # Fetch episodes for the series
        episodes_list=$(fetch_episodes "$media_id" | awk -F'|' '{print "ðŸ“º " $2}')
        [ -z "$episodes_list" ] && continue

        episode_selected=$(echo "$episodes_list" | fzf)
        if [ $? -ne 0 ]; then
          # If Escape is pressed, go back to the media selection
          continue
        fi
        [ -z "$episode_selected" ] && continue

        episode_id=$(fetch_episodes "$media_id" | grep "|$(echo "$episode_selected" | sed 's/ðŸ“º //')$" | awk -F'|' '{print $1}')
        play_media "$episode_id" "$episode_selected"
      fi
    done
  done
}

main
