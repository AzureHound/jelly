#!/usr/bin/env bash

CONFIG_FILE="$HOME/.config/jelly/config"

DEFAULT_EDITOR="${EDITOR:-vim}"
DEFAULT_MEDIA_PLAYER=$([[ "$OSTYPE" == "darwin"* ]] && echo "iina" || echo "mpv")

DEFAULT_FZF_OPTS='
    --color=fg:#cad3f5,fg+:#cad3f5,bg:-1,bg+:-1,gutter:#24273a
    --color=hl:#a6da95,hl+:#a6da95,info:#f4dbd6,scrollbar:#f0c6c6
    --color=header:#8aadf4,spinner:#f4dbd6,pointer:#a6da95,prompt:#c6a0f6
    --color=border:#494d64,label:#ed8796,separator:#b7bdf8,query:#a6da95
    --border="rounded" --border-label=" Jelly " --separator="─" --scrollbar="│"
    --prompt="󰥨 Search: " --pointer="❯"
'

for cmd in curl jq fzf socat; do
  if ! command -v "$cmd" &>/dev/null; then
    echo -e "\033[31mError:\033[0m '$cmd' is not installed."
    exit 1
  fi
done

if [ ! -f "$CONFIG_FILE" ]; then
  echo -e "\033[32mConfig Generated\033[0m - \033[34m$CONFIG_FILE\033[0m"
  mkdir -p "$(dirname "$CONFIG_FILE")"
  cat >"$CONFIG_FILE" <<EOL
server=your_jellyfin_server_address
api_key=your_api_key
editor=vim
player=mpv

# FZF Opts
FZF_DEFAULT_OPTS='$DEFAULT_FZF_OPTS'
EOL
  echo -e "\033[33mUpdate your Server URL & API Key.\033[0m"
  exit 1
else
  needs_update=false

  if ! grep -q "^server=" "$CONFIG_FILE"; then
    needs_update=true
  elif ! grep -q "^api_key=" "$CONFIG_FILE"; then
    needs_update=true
  elif ! grep -q "^editor=" "$CONFIG_FILE"; then
    needs_update=true
  elif ! grep -q "^player=" "$CONFIG_FILE"; then
    needs_update=true
  elif ! grep -q "FZF_DEFAULT_OPTS" "$CONFIG_FILE"; then
    needs_update=true
  elif [ "$(grep -c "^server=" "$CONFIG_FILE")" -gt 1 ]; then
    needs_update=true
  elif [ "$(grep -c "^api_key=" "$CONFIG_FILE")" -gt 1 ]; then
    needs_update=true
  elif [ "$(grep -c "^editor=" "$CONFIG_FILE")" -gt 1 ]; then
    needs_update=true
  elif [ "$(grep -c "^player=" "$CONFIG_FILE")" -gt 1 ]; then
    needs_update=true
  else
    editor_check=$(grep "^editor=" "$CONFIG_FILE" | head -1 | cut -d'=' -f2-)
    if [ -z "$editor_check" ]; then
      needs_update=true
    fi
  fi

  if [ "$needs_update" = true ]; then
    temp_config=$(mktemp)
    cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"

    server_val=$(grep "^server=" "$CONFIG_FILE" 2>/dev/null | head -1 | cut -d'=' -f2-)
    api_key_val=$(grep "^api_key=" "$CONFIG_FILE" 2>/dev/null | head -1 | cut -d'=' -f2-)
    editor_val=$(grep "^editor=" "$CONFIG_FILE" 2>/dev/null | head -1 | cut -d'=' -f2-)
    player_val=$(grep "^player=" "$CONFIG_FILE" 2>/dev/null | head -1 | cut -d'=' -f2-)

    [ -z "$server_val" ] && server_val="http://your-jellyfin-server:8096"
    [ -z "$api_key_val" ] && api_key_val="your_api_key"
    [ -z "$editor_val" ] && editor_val="vim"
    [ -z "$player_val" ] && player_val="mpv"

    echo "server=$server_val" >"$temp_config"
    echo "api_key=$api_key_val" >>"$temp_config"
    echo "editor=$editor_val" >>"$temp_config"
    echo "player=$player_val" >>"$temp_config"
    echo "" >>"$temp_config"
    echo "# FZF Opts" >>"$temp_config"

    if grep -q "FZF_DEFAULT_OPTS" "$CONFIG_FILE" 2>/dev/null; then
      in_fzf=false
      while IFS= read -r line; do
        if [[ "$line" =~ FZF_DEFAULT_OPTS ]]; then
          in_fzf=true
        fi
        if [ "$in_fzf" = true ]; then
          echo "$line" >>"$temp_config"
          if [[ "$line" == *"'"* ]] && [[ "$line" != *"FZF_DEFAULT_OPTS"* ]]; then
            break
          fi
        fi
      done <"$CONFIG_FILE"
    else
      cat >>"$temp_config" <<EOL
FZF_DEFAULT_OPTS='$DEFAULT_FZF_OPTS'
EOL
    fi

    mv "$temp_config" "$CONFIG_FILE"

    echo -e "\033[33mCONFIG UPDATED!\033[0m
Backup - ${CONFIG_FILE}.bak"
  fi
fi

source "$CONFIG_FILE"

EDITOR=${editor:-vim}
MEDIA_PLAYER=${player:-$DEFAULT_MEDIA_PLAYER}

[ -z "$FZF_DEFAULT_OPTS" ] && FZF_DEFAULT_OPTS="$DEFAULT_FZF_OPTS"

if ! command -v "$MEDIA_PLAYER" &>/dev/null; then
  echo -e "\033[31mError:\033[0m '$MEDIA_PLAYER' is not installed."
  exit 1
fi

if [ -z "$server" ] || [ -z "$api_key" ]; then
  echo -e "\033[31mError:\033[0m Config Missing 'server' or 'api_key'."
  exit 1
fi

if ! curl -s --connect-timeout 5 -o /dev/null "$server"; then
  echo -e "\033[31mError:\033[0m Connect Timeout - \033[34m$server\033[0m"
  echo -e "\033[33mCheck your Config\033[0m"
  exit 1
fi

export FZF_DEFAULT_OPTS

fetch_user_id() {
  curl -s -X GET -H "X-Emby-Token: $api_key" "$server/Users" | jq -r '.[0].Id'
}

fetch_continue_watching() {
  user_id=$(fetch_user_id)
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Users/$user_id/Items/Resume" | jq -r '.Items[] | if .Type == "Episode" then "\(.Id)|\(.Type)|\(.SeriesName) - \(.Name)|\(.UserData.PlaybackPositionTicks|tonumber / 10000000)" else "\(.Id)|\(.Type)|\(.Name)|\(.UserData.PlaybackPositionTicks|tonumber / 10000000)" end'
}

fetch_next_up() {
  user_id=$(fetch_user_id)
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Shows/NextUp?UserId=$user_id" | jq -r '.Items[] | "\(.Id)|\(.Type)|\(.SeriesName) - \(.Name)|\(.UserData.PlaybackPositionTicks|tonumber / 10000000)"'
}

fetch_libraries() {
  user_id=$(fetch_user_id)
  curl -s -X GET -H "X-Emby-Token: $api_key" "$server/Users/$user_id/Views" | jq -r '.Items[] | select(.CollectionType != "boxsets") | "\(.Id)|\(.Name)"'
}

fetch_media() {
  local library_id=$1
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Items?ParentId=$library_id&IncludeItemTypes=Movie,Series&Recursive=true" | jq -r '.Items[] | "\(.Id)|\(.Type)|\(.Name)"'
}

fetch_seasons() {
  local series_id=$1
  curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Shows/$series_id/Seasons?UserId=$(fetch_user_id)" | jq -r '.Items[] | "\(.Id)|\(.Name)|\(.IndexNumber)"'
}

fetch_episodes() {
  local series_id=$1
  local season_id=$2

  if [ -n "$season_id" ]; then
    curl -s -X GET -H "X-Emby-Token: $api_key" \
      "$server/Shows/$series_id/Episodes?SeasonId=$season_id&UserId=$(fetch_user_id)" |
      jq -r '.Items[] | "\(.Id)|\(.Name)|\(.IndexNumber)|\(.ParentIndexNumber)"'
  else
    curl -s -X GET -H "X-Emby-Token: $api_key" \
      "$server/Shows/$series_id/Episodes?UserId=$(fetch_user_id)" |
      jq -r '.Items[] | "\(.Id)|\(.Name)|\(.IndexNumber)|\(.ParentIndexNumber)"'
  fi
}

get_playback_progress() {
  local item_id=$1
  local user_id=$(fetch_user_id)

  local progress=$(curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Users/$user_id/Items/$item_id" |
    jq '.UserData.PlaybackPositionTicks // 0')

  awk -v ticks="$progress" 'BEGIN { printf "%.0f", ticks / 10000000 }'
}

start_playback_session() {
  local item_id=$1
  local user_id=$(fetch_user_id)

  local payload=$(
    cat <<EOF
{
  "UserId": "$user_id",
  "ItemId": "$item_id",
  "PlaySessionId": "jelly-$item_id-$$",
  "CanSeek": true,
  "IsPaused": false,
  "IsMuted": false,
  "VolumeLevel": 100
}
EOF
  )

  curl -s -X POST \
    -H "X-Emby-Token: $api_key" \
    -H "X-Emby-Client: Jelly" \
    -H "X-Emby-Device-Name: $(uname -n)" \
    -H "X-Emby-Device-Id: $(uname -n)-$$" \
    -H "X-Emby-Client-Version: 1.0" \
    -H "Content-Type: application/json" \
    -d "$payload" \
    "$server/Sessions/Playing" >/dev/null
}

report_progress() {
  local item_id=$1
  local position_seconds=$2
  local is_paused=${3:-false}
  local user_id=$(fetch_user_id)
  local position_ticks=$(awk -v seconds="$position_seconds" 'BEGIN { printf "%.0f", seconds * 10000000 }')

  local runtime=$(curl -s -X GET -H "X-Emby-Token: $api_key" \
    "$server/Users/$user_id/Items/$item_id" | jq '.RunTimeTicks // 0')

  local completion_percent=0
  if [ "$runtime" -gt 0 ]; then
    completion_percent=$(awk -v pos="$position_ticks" -v total="$runtime" 'BEGIN { printf "%.0f", (pos / total) * 100 }')
  fi

  if [ "$completion_percent" -ge 5 ]; then
    local played_status="false"
    local final_position=$position_ticks
    if [ "$completion_percent" -ge 95 ]; then
      played_status="true"
      final_position=0
    fi

    curl -s -X POST \
      -H "X-Emby-Token: $api_key" \
      -H "Content-Type: application/json" \
      -d "{\"PlaybackPositionTicks\":$final_position,\"Played\":$played_status}" \
      "$server/Users/$user_id/Items/$item_id/UserData" >/dev/null 2>&1
  fi

  local payload=$(
    cat <<EOF
{
  "UserId": "$user_id",
  "ItemId": "$item_id",
  "PlaySessionId": "jelly-$item_id-$$",
  "PositionTicks": $position_ticks,
  "IsPaused": $is_paused,
  "EventName": "timeupdate"
}
EOF
  )

  curl -s -X POST \
    -H "X-Emby-Token: $api_key" \
    -H "X-Emby-Client: Jelly" \
    -H "X-Emby-Device-Name: $(uname -n)" \
    -H "X-Emby-Device-Id: $(uname -n)-$$" \
    -H "X-Emby-Client-Version: 1.0" \
    -H "Content-Type: application/json" \
    -d "$payload" \
    "$server/Sessions/Playing/Progress" >/dev/null
}

stop_playback_session() {
  local item_id=$1
  local position_seconds=$2
  local user_id=$(fetch_user_id)
  local position_ticks=$(awk -v seconds="$position_seconds" 'BEGIN { printf "%.0f", seconds * 10000000 }')

  local payload=$(
    cat <<EOF
{
  "UserId": "$user_id",
  "ItemId": "$item_id",
  "PlaySessionId": "jelly-$item_id-$$",
  "PositionTicks": $position_ticks
}
EOF
  )

  curl -s -X POST \
    -H "X-Emby-Token: $api_key" \
    -H "X-Emby-Client: Jelly" \
    -H "X-Emby-Device-Name: $(uname -n)" \
    -H "X-Emby-Device-Id: $(uname -n)-$$" \
    -H "X-Emby-Client-Version: 1.0" \
    -H "Content-Type: application/json" \
    -d "$payload" \
    "$server/Sessions/Playing/Stopped" >/dev/null
}

play_media() {
  local id=$1
  local name=$2
  local resume_position=${3:-0}
  local playback_url="$server/Videos/$id/stream?X-Emby-Token=$api_key&Static=true"
  local socket_path="/tmp/mpv-socket-$$"

  local server_position=$(get_playback_progress "$id")
  if [ -n "$server_position" ] && [ "$server_position" -gt 0 ]; then
    resume_position=$server_position
  fi

  resume_position=$(echo "$resume_position" | tr -cd '0-9.' | awk '{printf "%.0f", $1}')

  if [ "$resume_position" -gt 0 ]; then
    choice=$(echo -e "$(date -u -d "@$resume_position" +"%H:%M:%S")\nStart from the beginning" | fzf --header="$name")
    case "$choice" in
    "Start from the beginning") resume_position=0 ;;
    "")
      return
      ;;
    *) ;;
    esac
  fi

  start_playback_session "$id"

  if [ "$MEDIA_PLAYER" = "iina" ]; then
    open -a IINA "$playback_url" --args --start-time="$resume_position" --force-media-title="$name"
  else
    mpv "$playback_url" \
      --start="$resume_position" \
      --force-media-title="$name" \
      --force-seekable=yes \
      --demuxer-lavf-o=fflags=+genpts \
      --demuxer-lavf-probe-info=nostreams \
      --demuxer-max-bytes=500MiB \
      --cache=yes \
      --cache-secs=60 \
      --stream-lavf-o=reconnect_streamed=1 \
      --stream-lavf-o=reconnect_delay_max=4 \
      --input-ipc-server="$socket_path" \
      --quiet \
      --no-terminal &
    mpv_pid=$!

    (
      sleep 2
      last_position=$resume_position
      while kill -0 $mpv_pid 2>/dev/null; do
        if [ -S "$socket_path" ]; then
          position=$(echo '{ "command": ["get_property", "playback-time"] }' |
            socat - "$socket_path" 2>/dev/null |
            grep -o '"data":[0-9.]*' | sed 's/"data"://g')

          if [[ "$position" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            last_position=$position
            report_progress "$id" "$position" "false"
          fi
        fi
        sleep 2
      done

      stop_playback_session "$id" "$last_position"
    ) &

    wait $mpv_pid
    rm -f "$socket_path"
  fi
}

edit_config_file() {
  if ! command -v "$EDITOR" &>/dev/null; then
    echo -e "\033[31mError:\033[0m Editor '$EDITOR' is not installed."
    echo "Please update your config with a valid editor."
    read -n 1 -s -r -p "Press any key to continue..."
    return
  fi

  "$EDITOR" "$CONFIG_FILE"

  source "$CONFIG_FILE"

  MEDIA_PLAYER=${player:-$DEFAULT_MEDIA_PLAYER}
  EDITOR=${editor:-vim}

  [ -z "$FZF_DEFAULT_OPTS" ] && FZF_DEFAULT_OPTS="$DEFAULT_FZF_OPTS"

  export FZF_DEFAULT_OPTS

  echo -e "\033[32mCONFIG RELOADED\033[0m"
  sleep 1
}

main() {
  while true; do
    local main_menu_option media_id media_name resume_position selected_option

    main_menu_option=$(echo -e "🍿 Continue Watching\n📺 Next Up\n🔍 Media\n📂 Libraries\n⚙️ Settings" | fzf)
    if [ $? -ne 0 ]; then
      exit 0
    fi

    case "$main_menu_option" in
    "🍿 Continue Watching")
      continue_watching_data=$(fetch_continue_watching)

      watch_list=$(echo "$continue_watching_data" | awk -F'|' '{
        if ($2 == "Episode") print "📺 " $3;
        else if ($2 == "Movie") print "🎬 " $3;
      }')

      selected_option=$(echo "$watch_list" | fzf --header="Continue Watching")
      if [ $? -ne 0 ]; then
        continue
      fi

      title_only=$(echo "$selected_option" | sed 's/^[📺🎬] //')
      media_id=$(echo "$continue_watching_data" | grep -F "|$title_only|" | awk -F'|' '{print $1}')
      media_type=$(echo "$continue_watching_data" | grep -F "|$title_only|" | awk -F'|' '{print $2}')
      display_name=$(echo "$continue_watching_data" | grep -F "|$title_only|" | awk -F'|' '{print $3}')
      resume_position=$(echo "$continue_watching_data" | grep -F "|$title_only|" | awk -F'|' '{print $4}')

      if [ "$media_type" = "Episode" ]; then
        media_name=$(echo "$display_name" | sed 's/^.* - //')
      else
        media_name="$display_name"
      fi

      play_media "$media_id" "$media_name" "$resume_position"
      ;;
    "📺 Next Up")
      next_up_data=$(fetch_next_up)

      next_up_list=$(echo "$next_up_data" | awk -F'|' '{
        if ($2 == "Episode") print "📺 " $3;
        else if ($2 == "Movie") print "🎬 " $3;
      }')

      selected_option=$(echo "$next_up_list" | fzf --header="Next Up")
      if [ $? -ne 0 ]; then
        continue
      fi

      title_only=$(echo "$selected_option" | sed 's/^[📺🎬] //')
      media_id=$(echo "$next_up_data" | grep -F "|$title_only|" | awk -F'|' '{print $1}')
      media_type=$(echo "$next_up_data" | grep -F "|$title_only|" | awk -F'|' '{print $2}')
      display_name=$(echo "$next_up_data" | grep -F "|$title_only|" | awk -F'|' '{print $3}')
      resume_position=$(echo "$next_up_data" | grep -F "|$title_only|" | awk -F'|' '{print $4}')

      if [ "$media_type" = "Episode" ]; then
        media_name=$(echo "$display_name" | sed 's/^.* - //')
      else
        media_name="$display_name"
      fi

      play_media "$media_id" "$media_name" "$resume_position"
      ;;
    "📂 Libraries")
      local current_view="libraries"
      local selected_library_id=""
      local selected_library_name=""
      local selected_media_id=""
      local selected_media_name=""
      local season_id=""
      local season_info=""
      local season_count=0

      while true; do
        case "$current_view" in
        "libraries")
          libraries_list=$(fetch_libraries | awk -F'|' '{print "📂 " $2}')
          library_selected=$(echo "$libraries_list" | fzf --header="Libraries")

          if [ $? -ne 0 ]; then
            break
          fi

          selected_library_name=$(echo "$library_selected" | sed 's/📂 //')
          selected_library_id=$(fetch_libraries | grep "|$selected_library_name$" | awk -F'|' '{print $1}')
          current_view="media"
          ;;

        "media")
          media_list=$(fetch_media "$selected_library_id" | awk -F'|' '{
                if ($2 == "Movie") print "🎬 " $3;
                else if ($2 == "Series") print "📺 " $3;
              }')

          selected=$(echo "$media_list" | fzf --header="$selected_library_name")
          if [ $? -ne 0 ]; then
            current_view="libraries"
            continue
          fi

          title_only=$(echo "$selected" | sed 's/^[🎬📺] //')
          item_data=$(fetch_media "$selected_library_id" | grep "|$title_only$")
          media_id=$(echo "$item_data" | awk -F'|' '{print $1}')
          media_type=$(echo "$item_data" | awk -F'|' '{print $2}')
          media_name=$(echo "$item_data" | awk -F'|' '{print $3}')

          selected_media_id="$media_id"
          selected_media_name="$media_name"

          resume_position=$(get_playback_progress "$media_id")

          if [ "$media_type" = "Series" ]; then
            current_view="seasons"
          else
            play_media "$media_id" "$media_name" "$resume_position"
            continue
          fi
          ;;

        "seasons")
          seasons_data=$(fetch_seasons "$selected_media_id")
          season_count=$(echo "$seasons_data" | grep -v "^$" | wc -l)

          if [ "$season_count" -eq 1 ]; then
            season_id=$(echo "$seasons_data" | awk -F'|' '{print $1}')
            season_info=$(echo "$seasons_data" | awk -F'|' '{
                if ($3 == "null") {
                  printf "📂 Special: %s", $2;
                } else {
                  printf "📂 Season %s", $3;
                }
              }')
            current_view="episodes"
          else
            seasons_list=$(echo "$seasons_data" | awk -F'|' '{
                if ($3 == "null") {
                  printf "📂 Special: %s\n", $2;
                } else {
                  printf "📂 Season %s\n", $3;
                }
              }')

            selected_season=$(echo "$seasons_list" | fzf --header="$selected_media_name")
            if [ $? -ne 0 ]; then
              current_view="media"
              continue
            fi

            season_number=$(echo "$selected_season" | sed -E 's/📂 Season ([0-9]+)/\1/')

            if [[ "$selected_season" == "📂 Special"* ]]; then
              season_id=$(echo "$seasons_data" | grep "|Special|" | awk -F'|' '{print $1}')
              season_info="Special"
            else
              season_id=$(echo "$seasons_data" | grep "|Season $season_number|" | awk -F'|' '{print $1}')
              season_info="Season $season_number"
            fi

            current_view="episodes"
          fi
          ;;

        "episodes")
          episodes_list=$(fetch_episodes "$selected_media_id" "$season_id" | awk -F'|' '{
                printf "E%02d: %s\n", $3, $2;
            }')

          selected_episode=$(echo "$episodes_list" | fzf --header="$season_info")
          if [ $? -ne 0 ]; then
            if [ "$season_count" -eq 1 ]; then
              current_view="media"
            else
              current_view="seasons"
            fi
            continue
          fi

          episode_name=$(echo "$selected_episode" | sed -E 's/^E[0-9]+: (.*)/\1/')
          episode_data=$(fetch_episodes "$selected_media_id" "$season_id" | grep "|$episode_name|")
          episode_id=$(echo "$episode_data" | awk -F'|' '{print $1}')
          episode_display_name=$(echo "$episode_data" | awk -F'|' '{print $2}')

          episode_resume=$(get_playback_progress "$episode_id")

          play_media "$episode_id" "$episode_display_name" "$episode_resume"
          continue
          ;;
        esac
      done
      ;;

    "🔍 Media")
      all_libraries=$(fetch_libraries)

      tmp_file=$(mktemp)

      echo "$all_libraries" | while IFS="|" read -r library_id library_name; do
        fetch_media "$library_id" | awk -F'|' -v lib="$library_name" '{
          printf "%s|%s|%s|🎬 %s {\033[38;2;238;212;159m%s\033[0m}\n", $1, $2, $3, $3, lib;
        }' >>"$tmp_file"
      done

      selected=$(cut -d '|' -f 4 "$tmp_file" | fzf --header="Media" --ansi)
      if [ $? -ne 0 ]; then
        rm "$tmp_file"
        continue
      fi

      title_match=$(echo "$selected" | sed 's/^🎬 //' | sed 's/ {[^}]*}$//')
      selected_data=$(grep "|$title_match|" "$tmp_file" | head -1)
      media_id=$(echo "$selected_data" | cut -d '|' -f 1)
      media_type=$(echo "$selected_data" | cut -d '|' -f 2)
      media_name=$(echo "$selected_data" | cut -d '|' -f 3)

      rm "$tmp_file"

      resume_position=$(get_playback_progress "$media_id")

      if [ "$media_type" = "Series" ]; then
        local current_view="seasons"
        local selected_media_id="$media_id"
        local selected_media_name="$media_name"
        local season_id=""
        local season_info=""
        local season_count=0

        while true; do
          case "$current_view" in
          "seasons")
            seasons_data=$(fetch_seasons "$selected_media_id")
            season_count=$(echo "$seasons_data" | grep -v "^$" | wc -l)

            if [ "$season_count" -eq 1 ]; then
              season_id=$(echo "$seasons_data" | awk -F'|' '{print $1}')
              season_info=$(echo "$seasons_data" | awk -F'|' '{
                  if ($3 == "null") {
                    printf "📂 Special: %s", $2;
                  } else {
                    printf "📂 Season %s", $3;
                  }
                }')
              current_view="episodes"
            else
              seasons_list=$(echo "$seasons_data" | awk -F'|' '{
                  if ($3 == "null") {
                    printf "📂 Special: %s\n", $2;
                  } else {
                    printf "📂 Season %s\n", $3;
                  }
                }')

              selected_season=$(echo "$seasons_list" | fzf --header="$selected_media_name")
              if [ $? -ne 0 ]; then
                break
              fi

              season_number=$(echo "$selected_season" | sed -E 's/📂 Season ([0-9]+)/\1/')

              if [[ "$selected_season" == "📂 Special"* ]]; then
                season_id=$(echo "$seasons_data" | grep "|Special|" | awk -F'|' '{print $1}')
                season_info="Special"
              else
                season_id=$(echo "$seasons_data" | grep "|Season $season_number|" | awk -F'|' '{print $1}')
                season_info="Season $season_number"
              fi

              current_view="episodes"
            fi
            ;;

          "episodes")
            episodes_list=$(fetch_episodes "$selected_media_id" "$season_id" | awk -F'|' '{
                  printf "E%02d: %s\n", $3, $2;
              }')

            selected_episode=$(echo "$episodes_list" | fzf --header="$season_info")
            if [ $? -ne 0 ]; then
              if [ "$season_count" -eq 1 ]; then
                break
              else
                current_view="seasons"
                continue
              fi
            fi

            episode_name=$(echo "$selected_episode" | sed -E 's/^E[0-9]+: (.*)/\1/')
            episode_data=$(fetch_episodes "$selected_media_id" "$season_id" | grep "|$episode_name|")
            episode_id=$(echo "$episode_data" | awk -F'|' '{print $1}')
            episode_display_name=$(echo "$episode_data" | awk -F'|' '{print $2}')

            episode_resume=$(get_playback_progress "$episode_id")

            play_media "$episode_id" "$episode_display_name" "$episode_resume"
            continue
            ;;
          esac
        done
      else
        play_media "$media_id" "$media_name" "$resume_position"
      fi
      ;;

    "⚙️ Settings")
      edit_config_file
      ;;
    esac
  done
}

trap "echo -e '\nExiting...'; exit 0" SIGINT SIGTERM

main
